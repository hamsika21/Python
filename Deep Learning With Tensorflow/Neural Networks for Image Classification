#%% Load libraries

import tensorflow as tf
from tensorflow.keras import datasets, models, layers
import matplotlib.pyplot as plt
from sklearn.metrics import confusion_matrix , classification_report
import numpy as np

#%% Define functions
def plot_sample(X, y, idx):
    
    plt.figure(figsize = (15, 2))
    plt.imshow(X[idx])
    plt.xlabel(y[idx])
#%% Load data
(X_train, y_train), (X_test, y_test) = datasets.cifar10.load_data()

y_train = y_train.reshape(-1,)
y_test = y_test.reshape(-1,)

#%% Build ANN

ann = models.Sequential([layers.Flatten(input_shape=(32, 32, 3)),
                        layers.Dense(3000, activation = 'relu'),
                        layers.Dense(1000, activation = 'relu'),
                        layers.Dense(3000, activation = 'relu'),
                        layers.Dense(10, activation = 'sigmoid'),
                        ])

ann.compile(optimizer = 'SGD', 
            loss = 'sparse_categorical_crossentropy',
            metrics = ['accuracy'])

ann.fit(X_train, y_train, epochs = 5)
y_pred = ann.predict(X_test)
y_pred_classes = [np.argmax(element) for element in y_pred]

print("Classification Report: \n", classification_report(y_test, y_pred_classes))

#%% Build CNN
cnn = models.Sequential([
    layers.Conv2D(filters=32, kernel_size=(3, 3), activation='relu', input_shape=(32, 32, 3)),
    layers.MaxPooling2D((2, 2)),
    
    layers.Conv2D(filters=64, kernel_size=(3, 3), activation='relu'),
    layers.MaxPooling2D((2, 2)),
    
    layers.Flatten(),
    layers.Dense(64, activation='relu'),
    layers.Dense(10, activation='softmax')
])

cnn.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

cnn.fit(X_train, y_train, epochs=10)

y_pred =cnn.predict(X_test)
y_pred_classes = [np.argmax(element) for element in y_pred]

print("Classification Report: \n", classification_report(y_test, y_pred_classes))

#%% Plots

plot_sample(X_train, y_train, 1000)

